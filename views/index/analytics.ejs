<% layout("/layouts/boilerplate") %>


<!-- Your existing content -->

<!-- Bootstrap CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">

<style>
  /* Styles remain unchanged */
  body {
    font-family: 'Segoe UI', Arial, sans-serif;
    background-color: #f4f6f9;
    color: #333;
    line-height: 1.6;
  }
  /* ... rest of the styles ... */
</style>

<body>
  <div class="container mt-5">
    <h1>Analytics Dashboard For Single Link</h1>
    <p class="subtitle">
      Tracking for: <%= shortUrl && shortUrl.shortUrl ? shortUrl.shortUrl : 'Unknown URL' %> | 
      Since: <%= analyticsData && analyticsData.date ? new Date(analyticsData.date).toLocaleDateString() : 'N/A' %>
    </p>
  </div>

  <!-- Basic Stats -->
  <div class="row stats-row mb-4">
    <div class="col-md-3 col-sm-6">
      <div class="card">
        <div class="card-body">
          <h5>Total Clicks</h5>
          <p class="display-4"><%= analyticsData && analyticsData.totalClicks !== undefined ? analyticsData.totalClicks : 0 %></p>
        </div>
      </div>
    </div>
    <div class="col-md-3 col-sm-6">
      <div class="card">
        <div class="card-body">
          <h5>Unique Visitors</h5>
          <p class="display-4"><%= analyticsData && analyticsData.uniqueVisitors !== undefined ? analyticsData.uniqueVisitors : 0 %></p>
        </div>
      </div>
    </div>
    <div class="col-md-3 col-sm-6">
      <div class="card">
        <div class="card-body">
          <h5>Avg. Time on Page</h5>
          <p class="display-4"><%= analyticsData && analyticsData.avgTimeOnPage !== undefined ? analyticsData.avgTimeOnPage.toFixed(1) : '0.0' %>s</p>
        </div>
      </div>
    </div>
    <div class="col-md-3 col-sm-6">
      <div class="card">
        <div class="card-body">
          <h5>Bounce Rate</h5>
          <p class="display-4"><%= analyticsData && analyticsData.bounceRate !== undefined ? analyticsData.bounceRate.toFixed(2) : '0.00' %>%</p>
        </div>
      </div>
    </div>
  </div>

  <!-- Charts and Additional Info -->
  <div class="row">
    <!-- User Agents Pie Chart -->
    <div class="col-md-6 col-lg-4 mb-4">
      <div class="card">
        <div class="card-body">
          <h5>Browser Distribution</h5>
          <canvas id="userAgentsChart"></canvas>
        </div>
      </div>
    </div>

    <!-- Device Pie Chart -->
    <div class="col-md-6 col-lg-4 mb-4">
      <div class="card">
        <div class="card-body">
          <h5>Device Distribution</h5>
          <canvas id="deviceChart"></canvas>
        </div>
      </div>
    </div>

    <!-- Locations Bar Chart -->
    <div class="col-md-6 col-lg-4 mb-4">
      <div class="card">
        <div class="card-body">
          <h5>Visitor Locations (Country)</h5>
          <canvas id="locationsChart"></canvas>
        </div>
      </div>
    </div>

    <!-- Referrers Pie Chart -->
    <div class="col-md-6 col-lg-4 mb-4">
      <div class="card">
        <div class="card-body">
          <h5>Traffic Sources</h5>
          <canvas id="referrersChart"></canvas>
        </div>
      </div>
    </div>

    <!-- Top Cities Bar Chart -->
    <div class="col-md-6 col-lg-4 mb-4">
      <div class="card">
        <div class="card-body">
          <h5>Top Cities</h5>
          <canvas id="citiesChart"></canvas>
        </div>
      </div>
    </div>

    <!-- Top IPs Table -->
    <div class="col-md-6 col-lg-4 mb-4">
      <div class="card">
        <div class="card-body">
          <h5>Top IP Addresses</h5>
          <table class="table table-sm">
            <thead>
              <tr>
                <th>IP</th>
                <th>Visits</th>
              </tr>
            </thead>
            <tbody>
              <% 
                const ipAddresses = analyticsData && analyticsData.ipAddresses ? analyticsData.ipAddresses : [];
                const ipCounts = {};
                ipAddresses.forEach(ip => {
                  ipCounts[ip] = (ipCounts[ip] || 0) + 1;
                });
                const topIps = Object.entries(ipCounts)
                  .sort((a, b) => b[1] - a[1])
                  .slice(0, 5);
                if (topIps.length > 0) {
                  topIps.forEach(([ip, count]) => { %>
                    <tr>
                      <td><%= ip %></td>
                      <td><%= count %></td>
                    </tr>
                  <% });
                } else { %>
                  <tr>
                    <td colspan="2">No IP data available</td>
                  </tr>
                <% } %>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  <!-- Chart.js Script -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    // Helper function to create charts with default data
    function createChart(ctx, type, labels, data, options, backgroundColors) {
      return new Chart(ctx, {
        type: type,
        data: {
          labels: labels.length ? labels : ['No Data'],
          datasets: [{
            data: data.length ? data : [1],
            backgroundColor: backgroundColors,
          }],
        },
        options: options,
      });
    }

    // User Agents Chart (Browser)
    const userAgentsData = <%- JSON.stringify(analyticsData && analyticsData.userAgents ? analyticsData.userAgents : []) %>;
    const browserCounts = {};
    userAgentsData.forEach(agent => {
      if (agent && agent.browser) {
        browserCounts[agent.browser] = (browserCounts[agent.browser] || 0) + 1;
      }
    });
    createChart(
      document.getElementById('userAgentsChart'),
      'pie',
      Object.keys(browserCounts),
      Object.values(browserCounts),
      { responsive: true, plugins: { legend: { position: 'top' } } },
      ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF']
    );

    // Device Chart
    const deviceCounts = {};
    userAgentsData.forEach(agent => {
      if (agent && agent.device) {
        deviceCounts[agent.device] = (deviceCounts[agent.device] || 0) + 1;
      }
    });
    createChart(
      document.getElementById('deviceChart'),
      'pie',
      Object.keys(deviceCounts),
      Object.values(deviceCounts),
      { responsive: true, plugins: { legend: { position: 'top' } } },
      ['#FF6384', '#36A2EB', '#FFCE56']
    );

    // Locations Chart (Country)
    const locationData = <%- JSON.stringify(analyticsData && analyticsData.locationData ? analyticsData.locationData : []) %>;
    const countryCounts = {};
    locationData.forEach(loc => {
      if (loc && loc.country) {
        countryCounts[loc.country] = (countryCounts[loc.country] || 0) + 1;
      }
    });
    createChart(
      document.getElementById('locationsChart'),
      'bar',
      Object.keys(countryCounts),
      Object.values(countryCounts),
      { responsive: true, scales: { y: { beginAtZero: true } } },
      ['#36A2EB']
    );

    // Top Cities Chart
    const cityCounts = {};
    locationData.forEach(loc => {
      if (loc && loc.city) {
        cityCounts[loc.city] = (cityCounts[loc.city] || 0) + 1;
      }
    });
    const topCities = Object.entries(cityCounts).sort((a, b) => b[1] - a[1]).slice(0, 5);
    createChart(
      document.getElementById('citiesChart'),
      'bar',
      topCities.map(c => c[0]),
      topCities.map(c => c[1]),
      { responsive: true, scales: { y: { beginAtZero: true } } },
      ['#4BC0C0']
    );

    // Referrers Chart
    const referrersData = <%- JSON.stringify(analyticsData && analyticsData.referrers ? analyticsData.referrers : []) %>;
    const referrerCounts = {};
    referrersData.forEach(ref => {
      if (ref) {
        referrerCounts[ref] = (referrerCounts[ref] || 0) + 1;
      }
    });
    createChart(
      document.getElementById('referrersChart'),
      'pie',
      Object.keys(referrerCounts),
      Object.values(referrerCounts),
      { responsive: true, plugins: { legend: { position: 'top' } } },
      ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF']
    );
  </script>
</body>